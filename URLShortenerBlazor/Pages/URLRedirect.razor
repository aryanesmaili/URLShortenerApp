@page "/RedirectURL/{shortCode}"
@inject NavigationManager Navigation
@inject IRedirectService RedirectService
@inject Blazored.Toast.Services.IToastService ToastClient
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Pexita Link Shortener</PageTitle>
<body>
    @if (!string.IsNullOrEmpty(errorMessage) && errorMessage is not null)
    {
        <div class="alert alert-danger mt-1 mb-2 py-1">
            <ul class="list-group list-group-flush">
                @foreach (var error in errorMessage)
                {
                    <li class="list-group-item list-group-item-danger mx-3 my-2">@error</li>
                }
            </ul>
        </div>
    }
    <div class="container bg-light ">
        <!-- Top Banner Ad -->
        <div class="ad-banner">
            <div class="ad-label">Advertisement</div>
            <div class="ad-space">Your Ad Here</div>
        </div>

        <main class="content-wrapper my-3">
            <!-- Left Sidebar Ad -->
            <aside class="sidebar-ad">
                <div class="ad-label">Advertisement</div>
                <div class="ad-space">Your Ad Here</div>
            </aside>

            <!-- Main Content -->
            <article class="main-content">
                <div class="card my-5 mx-3">
                    <h1 class="h4">@headerText</h1>

                    <p class="subtitle mt-2 mb-5">
                        @(showsubtitle ? "Please wait while we prepare your destination" : "")
                    </p>

                    <p class="text-left my-4">@url.Description</p>
                    <p class="px-2 py-3 categories text-start">
                        @if (url.Categories?.Count > 0)
                            @foreach (var category in url.Categories)
                            {
                                <span class="@GetCategorySpanClass(category.Title)">@category.Title</span>
                            }
                    </p>
                    <!-- Countdown Timer -->
                    <div class="countdown-wrapper my-3" style="@countCircleStyle">
                        <div class="countdown">
                            <svg class="countdown-svg" viewBox="0 0 100 100">
                                <circle class="countdown-circle-bg" cx="50" cy="50" r="45" />
                                <circle class="countdown-circle" cx="50" cy="50" r="45"
                                        style="stroke-dasharray: 283; stroke-dashoffset: @strokeDashOffset;" />
                            </svg>
                            <div class="countdown-number">@countdownValue</div>
                        </div>
                    </div>

                    <!-- Destination URL (Initially Hidden) -->
                    <div class="destination-url" id="destination-url" style="@destinationUrlStyle">
                        <div class="url-container">
                            <span class="url-text">@url.LongURL</span>
                            <button class="copy-btn" @onclick="CopyToClipboard">
                                <Icon Name="IconName.Copy" />
                            </button>
                        </div>
                        <a href="@url.LongURL" class="proceed-btn">Proceed to Destination</a>
                    </div>

                    <!-- Features -->
                    <div class="features mt-5   ">
                        <div class="feature">
                            <Icon Name="IconName.Shield" IconSize="IconSize.x2" />
                            <span>Safe & Secure</span>
                        </div>
                        <div class="feature">
                            <Icon Name="IconName.Bolt" IconSize="IconSize.x2" />
                            <span>Fast Redirect</span>
                        </div>
                        <div class="feature">
                            <Icon Name="IconName.DollarSign" IconSize="IconSize.x2" />
                            <span>Earn & Share</span>
                        </div>
                    </div>
                </div>
            </article>

            <!-- Right Sidebar Ad -->
            <aside class="sidebar-ad">
                <div class="ad-label">Advertisement</div>
                <div class="ad-space">Your Ad Here</div>
            </aside>
        </main>

        <!-- Bottom Banner Ad -->
        <div class="ad-banner">
            <div class="ad-label">Advertisement</div>
            <div class="ad-space">Your Ad Here</div>
        </div>
    </div>
    <script>
        window.copyToClipboard = function (text) {
            navigator.clipboard.writeText(text)
                .catch(function (err) {
                    console.error('Could not copy text: ', err);
                });
        }
    </script>
</body>
@code {
    [Parameter]
    public string? ShortCode { get; set; }
    URLDTO url = new();
    private string errorMessage = string.Empty;
    private readonly List<string> badges = new()
    {
        "badge bg-primary",
        "badge bg-secondary",
        "badge bg-success",
        "badge bg-danger",
        "badge bg-info",
    };

    private int countdownValue = 10; // Starting countdown value
    private double strokeDashOffset = 0; // Stroke offset for animation
    private System.Timers.Timer? countdownTimer;
    private string destinationUrlStyle = "display: none;";
    private string countCircleStyle = "display: flex;";
    private string headerText = "Your Link is Almost Ready!";
    private bool showsubtitle = true;

    protected override void OnInitialized()
    {
        // Initialize the countdown timer
        countdownTimer = new System.Timers.Timer(1000); // 1 second interval
        countdownTimer.Elapsed += UpdateCountdown;
        countdownTimer.Start();

        strokeDashOffset = 0; // Full circle length at start
        base.OnInitialized();
    }

    private void UpdateCountdown(object? sender, System.Timers.ElapsedEventArgs e)
    {
        if (countdownValue > 0)
        {
            countdownValue--;
            strokeDashOffset = 283 * (1 - (countdownValue / 10.0)); // Reverse fill

            InvokeAsync(StateHasChanged); // Trigger UI update
        }
        else
        {
            countdownTimer!.Stop();
            destinationUrlStyle = "display: block;"; // Show destination URL
            countCircleStyle = "display: none;";
            headerText = "Your Link is Ready!";
            showsubtitle = false;
            InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        countdownTimer?.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        await ResolveURL(ShortCode!);
        await base.OnInitializedAsync();
    }

    private async Task ResolveURL(string shortcode)
    {
        APIResponse<URLDTO> response = await RedirectService.ResolveURL(shortcode);
        try
        {
            if (response.Success)
            {
                url = response.Result!;
            }
            else
            {
                ToastClient.ShowError("Operation was not succesful", options => options.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
                errorMessage = response.ErrorMessage;
            }
        }
        catch (Exception)
        {
            errorMessage = response.ErrorMessage;
            ToastClient.ShowError(errorMessage, options => options.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);

        }
    }
    private async Task CopyToClipboard()
    {
        if (!string.IsNullOrEmpty(url.LongURL))
        {
            ToastClient.ShowSuccess("Text Copied to Clipboard!", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
            await JSRuntime.InvokeVoidAsync("copyToClipboard", url.LongURL);
        }
    }
    private string GetCategorySpanClass(string category)
    {
        int index = Math.Abs(category.GetHashCode()) % badges.Count;
        return badges[index];
    }
}