@page "/Login"
@using BlazorTurnstile
@inject NavigationManager Navigation
@inject IAuthenticationService AuthService

<PageTitle>Login</PageTitle>

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card">

        <div Class="card-header">
            <h1 class="h3 text-center">Login</h1>
        </div>

        <div class="card-body">
            @if (errorMessage?.Count != 0 && errorMessage is not null)
            {
                <div class="alert alert-danger mt-1 mb-2 py-1">
                    <ul class="list-group list-group-flush">
                        @foreach (var error in errorMessage)
                        {
                            <li class="list-group-item list-group-item-danger mx-3 my-2">@error</li>
                        }
                    </ul>
                </div>
            }
            <EditForm Model="@loginDTO" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label for="identifier" class="form-label">Email or Username</label>
                    <InputText @bind-Value="loginDTO.Identifier" type="text" class="form-control" id="identifier" placeholder="Email or username" required />
                    <ValidationMessage For="() => loginDTO.Identifier" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText @bind-Value="loginDTO.Password" type="password" class="form-control" id="password" placeholder="Enter your password" required />
                    <ValidationMessage For="() => loginDTO.Password" />
                </div>

                <!----
                <div class="d-grid gap-2">
                    <Turnstile @bind-Token="@_turnstileToken"
                               SiteKey="0x4AAAAAAAzgVfFysbsqJ1AU"
                               Appearance="@TurnstileAppearance.InteractionOnly"
                               Execution="@TurnstileExecution.Render"
                               Theme="@TurnstileTheme.Light"
                               OnCallback="@TurnstileCallback"
                               OnErrorCallback="@TurnstileErrorCallback"
                               ResponseField="@false" />
                </div>
                ---->
                <div class="d-grid gap-2">
                    <button type="submit" class="btn btn-primary">Login</button>
                </div>
                <div class="mt-3 text-center">
                    <small><a href="/ForgetPassword">Forgot password?</a></small>
                </div>
                <div class="mt-2 text-center">
                    <small>Don't have an account? <a href="/Signup">Sign up</a></small>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {
    private UserLoginDTO loginDTO = new();
    private List<string> errorMessage = new();

    private Turnstile turnstile = default!;

    private string? _turnstileToken;

    private bool captchaSuccess = false;

    [CascadingParameter] public Task<AuthenticationState> authStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await authStateTask).User;
        if (user.Identity.IsAuthenticated)
            Navigation.NavigateTo("/");
    }

    private async Task TurnstileCallback(string token)
    {
        APIResponse<CaptchaVerificationResponse> captchaResult = await AuthService.VerifyCaptcha(token);
        if (captchaResult.Success)
        {
            captchaSuccess = true;
            return;
        }
        await ResetTurnstile();
        errorMessage = new() { captchaResult.ErrorMessage };
        StateHasChanged();
    }

    private void TurnstileErrorCallback(string message)
    {
        errorMessage = new() { message };
        StateHasChanged();
    }

    private async Task ResetTurnstile()
    {
        await turnstile.ResetAsync();
    }

    private async Task HandleLogin()
    {
        try
        {
            // if (!captchaSuccess)
            // {
            //     errorMessage = new() { "Captcha Has Not Been Verified Yet" };
            //     return;
            // }

            // captchaSuccess = false;
            errorMessage.Clear();
            StateHasChanged();

            APIResponse<UserDTO> response = await AuthService.Login(loginDTO);

            if (response.Success)
                Navigation.NavigateTo("/Profile", true);

            else
            {
                if (response.ErrorType == ErrorType.ValidationException)
                {
                    errorMessage = response.Errors;
                }
                else
                {
                    errorMessage = new() { response.ErrorMessage };
                }
            }
        }

        catch (Exception ex)
        {
            errorMessage = new() { ex.Message };
        }
        finally
        {
            StateHasChanged();
        }
    }
}
