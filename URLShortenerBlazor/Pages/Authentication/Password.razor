@page "/ForgetPassword"
@inject IProfileSettingsService SettingsService
@inject Blazored.Toast.Services.IToastService ToastClient
@inject NavigationManager Navigation

<PageTitle>Reset Password</PageTitle>
<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card">

        <div Class="card-header">
            <h1 class="h3 text-center">Reset Password</h1>
        </div>

        <div class="card-body pt-4">
            @if (errorMessages?.Count != 0 && errorMessages is not null)
            {
                <div class="alert alert-danger mt-1 mb-2 py-1">
                    <ul class="list-group list-group-flush">
                        @foreach (var error in errorMessages)
                        {
                            <li class="list-group-item list-group-item-danger mx-3 my-2">@error</li>
                        }
                    </ul>
                </div>
            }

            <EditForm Model="changePasswordRequestInfo" OnValidSubmit="SendPasswordChangeRequest" id="passwordChangeForm">
                <DataAnnotationsValidator />

                <div style="@($"display:{(isPasswordChangeRequestVisible ? "inline" : "none")};")">
                    <div class="mb-4">
                        <label for="identifier" class="form-label">Email or Username</label>
                        <InputText class="form-control" @bind-Value="identifier" id="identifier" name="identifier" placeholder="Email or Username"></InputText>
                    </div>
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" type="button" @onclick="RequestPasswordChange">Send Code</button>
                    </div>
                </div>

                <div style="@($"display:{(isPasswordCodeFieldVisible ? "inline" : "none")};")">
                    <div class="mb-4">
                        <label for="Code" class="form-label">Enter Code Sent to Your Email</label>
                        <InputText @bind-Value="PasswordVerificationCode!.Code" type="text" class="form-control" id="Code" name="Code" placeholder="Code" />
                    </div>
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" type="button" @onclick="SendPasswordVerificationCode">Submit Code</button>
                    </div>
                </div>

                <div style="@($"display:{(isNewPasswordFieldVisible ? "inline" : "none")};")">
                    <div class="mb-4">
                        <div class="mb-2">
                            <label for="newPassword" class="form-label">New Password</label>
                            <InputText @bind-Value="changePasswordRequestInfo!.NewPassword" type="password" class="form-control" id="newPassword" name="newPassword" autocomplete="new-password" placeholder="new password" />
                            <small class="form-text text-danger">* 5-64 characters</small>
                            <ValidationMessage For="() => changePasswordRequestInfo.NewPassword" />
                        </div>
                        <div class="mb-2">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <InputText @bind-Value="changePasswordRequestInfo.ConfirmPassword" type="password" class="form-control" id="confirmPassword" name="confirmPassword" autocomplete="new-password" placeholder="Confirm new password" />
                            <small class="form-text text-danger">* Must match new password</small>
                            <ValidationMessage For="() => changePasswordRequestInfo.ConfirmPassword" />
                        </div>
                    </div>
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary">Change Password</button>
                    </div>
                </div>
            </EditForm>
        </div>

    </div>
</div>


@code {
    ChangePasswordRequest? changePasswordRequestInfo = new()
        {
            ConfirmPassword = string.Empty,
            NewPassword = string.Empty,
            UserInfo = null
        };
    CheckVerificationCode? PasswordVerificationCode;
    private List<string> errorMessages = new();
    private string identifier = string.Empty;

    private bool isPasswordChangeRequestVisible = true;
    private bool isPasswordCodeFieldVisible = false;
    private bool isNewPasswordFieldVisible = false;

    protected override async Task OnInitializedAsync()
    {
        PasswordVerificationCode = new();
        await base.OnInitializedAsync();
    }
    private async Task RequestPasswordChange()
    {
        try
        {
            APIResponse<string> response = await SettingsService.RequestChangePassword(identifier);
            if (!response.Success)
            {
                errorMessages = new() { response.ErrorMessage };
                return;
            }
            ManagePasswordVisibility(RequestButtonVisible: !response.Success, CodeFieldVisible: response.Success); // set the visibility of Ui Elements.
            errorMessages.Clear();
        }
        catch (Exception e)
        {
            errorMessages = new() { e.Message };
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task SendPasswordVerificationCode()
    {
        try
        {
            if (string.IsNullOrEmpty(PasswordVerificationCode!.Code))
                return;
            PasswordVerificationCode.Identifier = identifier;
            APIResponse<UserDTO> response = await SettingsService.SendPasswordVerificationCode(PasswordVerificationCode);
            if (!response.Success)
            {
                errorMessages = new() { response.ErrorMessage };
                return;
            }
            changePasswordRequestInfo = new()
                {
                    NewPassword = string.Empty,
                    ConfirmPassword = string.Empty,
                    UserInfo = response.Result!
                };
            ManagePasswordVisibility(CodeFieldVisible: !response.Success, NewPasswordVisible: response.Success); // set the visibility of Ui Elements.
            errorMessages.Clear();
            PasswordVerificationCode.Identifier = string.Empty;
            PasswordVerificationCode.Code = string.Empty;
        }
        catch (Exception e)
        {
            errorMessages = new() { e.Message };
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task SendPasswordChangeRequest()
    {
        try
        {
            if (string.IsNullOrEmpty(changePasswordRequestInfo!.NewPassword) || string.IsNullOrEmpty(changePasswordRequestInfo.ConfirmPassword))
            {
                errorMessages = new() { "Please enter your email or username" };
                return;
            }

            APIResponse<UserDTO> response = await SettingsService.SendChangePassowrdRequest(changePasswordRequestInfo);
            if (!response.Success)
            {
                if (response.ErrorType == ErrorType.ValidationException)
                {
                    errorMessages = new(response.Errors);
                    return;
                }
                errorMessages = new() { response.ErrorMessage };
                return;
            }
            ManagePasswordVisibility(RequestButtonVisible: response.Success, NewPasswordVisible: !response.Success); // set the visibility of Ui Elements.
            errorMessages.Clear();
            changePasswordRequestInfo.NewPassword = string.Empty;
            changePasswordRequestInfo.ConfirmPassword = string.Empty;
            ToastClient.ShowSuccess("Password Updated Succesfully. Redirecting....", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
            await Task.Delay(2000);
            Navigation.NavigateTo("/Login");
        }
        catch (Exception e)
        {
            errorMessages = new() { e.Message };
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void ManagePasswordVisibility(bool RequestButtonVisible = false, bool CodeFieldVisible = false, bool NewPasswordVisible = false)
    {
        isPasswordChangeRequestVisible = RequestButtonVisible;
        isPasswordCodeFieldVisible = CodeFieldVisible;
        isNewPasswordFieldVisible = NewPasswordVisible;
    }

}
