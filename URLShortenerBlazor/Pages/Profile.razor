@page "/Profile"
@inject ToastService ToastClient
@inject JSRuntime JSRuntime
@inject IShortenerService ShortenerService

<main class="container vh-100">
    <div class="card">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col-md-6 text-center text-md-start">
                    <Icon Name="IconName.UserCircle" IconSize="IconSize.x4" Class="mb-2"></Icon>
                    <h1 class="my-2">@userinfo.Name</h1>
                </div>
                <div class="col-md-6 text-center text-md-end">
                    <p class="mb-0 fs-5"><Icon Name="IconName.Mail"></Icon> @userinfo.Email</p>
                    <p class="mb-0 fs-5 mt-2"><Icon Name="IconName.Link"></Icon> Total URLs: @urlCount</p>
                </div>
            </div>
        </div>
        <div class="mt-5">
            <h2 class="h4 mb-3">Preview of Shortened URLs</h2>
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-purple">
                        <tr>
                            <th>ID</th>
                            <th>Description</th>
                            <th>Short Code</th>
                            <th>Long URL</th>
                            <th>Category</th>
                            <th>Status</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in TableURLs)
                        {
                            <tr>
                                <td>@item.Index</td>
                                <td>@item.URL.Description</td>
                                <td><a href="https://Pexita.click/@item.URL.ShortCode" class="text-decoration-none">@item.URL.ShortCode</a></td>
                                <td class="text-truncate">@item.URL.LongURL</td>
                                <td>
                                    @if (item.URL.Categories?.Count > 0)
                                        @foreach (var category in item.URL.Categories)
                                        {
                                            <span class="@GetCategorySpanClass(category.Title)">@category.Title</span>
                                        }
                                </td>
                                <td>
                                    <button type="button" class="status-toggle" @onclick="() => ToggleActivation(item.URL.ID, item.URL.IsActive)">
                                        <span class="status-badge @(item.URL.IsActive ? "active" : "inactive")">
                                            @(item.URL.IsActive ? "Active" : "InActive")
                                        </span>
                                    </button>
                                </td>
                                <td>
                                    <button class="btn btn-icon" title="Copy URL" @onclick="() => CopyToClipboard(item.URL.ShortCode!)">
                                        <Icon Name="IconName.Copy"></Icon>
                                    </button>
                                    <button class="btn btn-icon" style="color:orangered;" title="Delete URL" @onclick="() => DeleteURL(item.URL.ID)">
                                        <Icon Name="IconName.Delete"></Icon>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            @if (TableURLs.Count > 0)
            {
                <p class="text-dark">
                    <small>
                        ** If a row is shown in <span style="color:gray">Gray Color</span> it means it has been shortened before by you.
                    </small>
                </p>
            }
        </div>

    </div>
</main>
@code {
    UserDTO userinfo;
    private int urlCount = 0;
    private List<TRow> TableURLs;
    private List<string> errorMessage = new();
    private readonly List<string> badges = new()
    {
        "badge bg-primary",
        "badge bg-secondary",
        "badge bg-success",
        "badge bg-danger",
        "badge bg-info",
    };




    private string GetRowClass(TRow row)
    {
        return row.isNew ? "" : "table-secondary";
    }

    private string GetCategorySpanClass(string category)
    {
        int index = Math.Abs(category.GetHashCode()) % badges.Count;
        return badges[index];
    }

    private async Task CopyToClipboard(string textToCopy)
    {
        if (!string.IsNullOrEmpty(textToCopy))
        {
            textToCopy = "https://Pexita.click/" + textToCopy;
            ToastClient.ShowSuccess("Text Copied to Clipboard!", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
            await JSRuntime.InvokeVoidAsync("copyToClipboard", textToCopy);
        }
    }

    private async Task CopyAllToClipboard()
    {
        string textToCopy = string.Join('\n', TableURLs.Select(x => $"https://Pexita.click/{x.URL.ShortCode}"));
        ToastClient.ShowSuccess("All Shortened Links were Copied to Clipboard!", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
        await JSRuntime.InvokeVoidAsync("copyToClipboard", textToCopy);
    }

    private async Task DeleteURL(int urlID)
    {
        APIResponse<string> response = await ShortenerService.DeleteURL(urlID);
        if (response.Success)
        {
            var urlindex = TableURLs.IndexOf(TableURLs.First(x => x.URL.ID == urlID));
            TableURLs.RemoveAt(urlindex);
            for (int i = urlindex + 1; i < TableURLs.Count; i++)
            {
                TableURLs[i].Index -= 1;
            }
            StateHasChanged();
            ToastClient.ShowSuccess("URL Deleted Successfully", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
        }
        else
            ToastClient.ShowError("Something went wrong while deleting the URL", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
    }

    private async Task ToggleActivation(int urlID, bool isActive)
    {
        APIResponse<string> response = await ShortenerService.ToggleActivation(urlID);

        if (response.Success)
        {
            var url = TableURLs.First(x => x.URL.ID == urlID);
            url.URL.IsActive = !isActive; 

            string newState = isActive ? "InActivated" : "Activated";
            StateHasChanged();
            ToastClient.ShowInfo($"{newState}", settings =>
            {
                settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter;
                settings.Timeout = 2;
            });
        }
        else
        {
            ToastClient.ShowError($"There was an error processing your request:\n{response.ErrorMessage}");
        }
    }

}