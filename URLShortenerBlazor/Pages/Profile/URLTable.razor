@inject Blazored.Toast.Services.IToastService ToastClient
@inject IJSRuntime JSRuntime
@inject IShortenerService ShortenerService
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@inject IProfileServices ProfileService


<div class="mt-5 mb-5">
    <h2 class="h4 px-3 mb-3">Your Links</h2>
    <table class="table-responsive table table-hover">
        <thead>
            <tr>
                <th>ID</th>
                <th>Description</th>
                <th>Short Code</th>
                <th>Long URL</th>
                <th>Category</th>
                <th>Status</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in TableURLs)
            {
                <tr class="bg-light">
                    <td>@item.Index</td>
                    <td>@item.URL.Description</td>
                    <td><a href="https://Pexita.click/@item.URL.ShortCode" class="text-decoration-none">@item.URL.ShortCode</a></td>
                    <td>@item.URL.LongURL</td>
                    <td class="px-2 py-3">
                        @if (item.URL.Categories?.Count > 0)
                            @foreach (var category in item.URL.Categories)
                            {
                                <span class="@GetCategorySpanClass(category.Title)">@category.Title</span>
                            }
                    </td>
                    <td>
                        <button type="button" class="status-toggle" @onclick="() => ToggleActivation(item.URL.ID, item.URL.IsActive)">
                            <span class="status-badge @(item.URL.IsActive ? "active" : "inactive")">
                                @(item.URL.IsActive ? "Active" : "InActive")
                            </span>
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-icon" title="Copy URL" @onclick="() => CopyToClipboard(item.URL.ShortCode!)">
                            <Icon Name="IconName.Copy"></Icon>
                        </button>
                        <button class="btn btn-icon" style="color:orangered;" title="Delete URL" @onclick="() => DeleteURL(item.URL.ID)">
                            <Icon Name="IconName.Delete"></Icon>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <div class="d-flex flex-column align-items-center mt-5">
        <nav aria-label="Table pagination">
            <ul class="pagination">
                <li class="page-item @(currentpageNumber <= 1 ? "disabled" : "")">
                    <button type="button" class="page-link" @onclick="() => ChangePage(currentpageNumber - 1)" tabindex="-1">Previous</button>
                </li>

                @if (currentpageNumber > 2)
                {
                    <li class="page-item">
                        <button type="button" class="page-link" @onclick="() => ChangePage(1)">1</button>
                    </li>
                    @if (currentpageNumber > 3)
                    {
                        <li class="page-item">
                            <span class="page-link">...</span>
                        </li>
                    }
                }

                @if (currentpageNumber - 1 >= 1)
                {
                    <li class="page-item">
                        <button type="button" class="page-link" @onclick="() => ChangePage(currentpageNumber - 1)">@(currentpageNumber - 1)</button>
                    </li>
                }

                <li class="page-item active">
                    <button type="button" class="page-link">@currentpageNumber</button>
                </li>

                @if (currentpageNumber + 1 <= TotalPages)
                {
                    <li class="page-item">
                        <button type="button" class="page-link" @onclick="() => ChangePage(currentpageNumber + 1)">@(currentpageNumber + 1)</button>
                    </li>
                }

                @if (currentpageNumber + 2 < TotalPages)
                {
                    <li class="page-item">
                        <button type="button" class="page-link" @onclick="() => ChangePage(currentpageNumber + 2)">@(currentpageNumber + 2)</button>
                    </li>
                }

                @if (currentpageNumber < TotalPages - 1)
                {
                    <li class="page-item">
                        <span class="page-link">...</span>
                    </li>
                }
                @if (currentpageNumber != TotalPages && currentpageNumber != TotalPages - 1)
                {
                    <li class="page-item">
                        <button type="button" class="page-link" @onclick="() => ChangePage(TotalPages)">@TotalPages</button>
                    </li>
                }
                <li class="page-item @(currentpageNumber == TotalPages ? "disabled" : "")">
                    <button type="button" class="page-link" @onclick="() => ChangePage(currentpageNumber + 1)">Next</button>
                </li>
            </ul>

        </nav>
        <div class="pagination-info text-muted">
            <small>
                Showing <span class="fw-bold">@(Index - pageSize)-@Index</span> of <span class="fw-bold">@TotalCount</span> items
            </small>
        </div>
    </div>
</div>
<script>
    window.copyToClipboard = function (text) {
        navigator.clipboard.writeText(text)
            .catch(function (err) {
                console.error('Could not copy text: ', err);
            });
    }
</script>
@code {
    private int userID = 1;

    private int urlCount = 0;
    private List<TRow> TableURLs = new();
    private List<string> errorMessage = new();
    private readonly List<string> badges = new()
    {
        "badge bg-primary",
        "badge bg-secondary",
        "badge bg-success",
        "badge bg-danger",
        "badge bg-info",
    };
    private List<TRow> rows = new();
    private int pageSize = 10;
    private int currentpageNumber = 1;
    private int TotalPages = 0;
    private int TotalCount = 0;
    private int Index = 1;

    protected override async Task OnInitializedAsync()
    {
        await GetTableURLs(userID);
        await base.OnInitializedAsync();
    }

    private async Task GetTableURLs(int userID, int pageNumber = 1, int pageSize = 10)
    {
        APIResponse<PagedResult<URLDTO>> response = await ProfileService.GetProfileURLList(userID, pageNumber, pageSize);
        try
        {
            if (!response.Success)
                throw new Exception();

            currentpageNumber = response.Result!.PageNumber;
            TotalPages = response.Result.TotalPages;
            TotalCount = response.Result.TotalCount;

            foreach (var item in response.Result.Items)
            {
                TRow row = new TRow() { URL = item, Index = Index, IsNew = true };
                TableURLs.Add(row);
                Index++;
            }
        }
        catch (Exception)
        {
            errorMessage = new List<string>() { response.ErrorMessage };
        }
    }

    private async Task ChangePage(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > TotalPages || pageNumber == currentpageNumber)
            return;

        Index = ((pageNumber - 1) * pageSize) + 1;
        TableURLs.Clear();
        await GetTableURLs(userID, pageNumber);
        StateHasChanged();
    }

    private string GetRowClass(TRow row)
    {
        return row.IsNew ? "" : "table-secondary";
    }

    private string GetCategorySpanClass(string category)
    {
        int index = Math.Abs(category.GetHashCode()) % badges.Count;
        return badges[index];
    }

    private async Task CopyToClipboard(string textToCopy)
    {
        if (!string.IsNullOrEmpty(textToCopy))
        {
            textToCopy = "https://Pexita.click/" + textToCopy;
            ToastClient.ShowSuccess("Text Copied to Clipboard!", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
            await JSRuntime.InvokeVoidAsync("copyToClipboard", textToCopy);
        }
    }

    private async Task CopyAllToClipboard()
    {
        string textToCopy = string.Join('\n', TableURLs.Select(x => $"https://Pexita.click/{x.URL.ShortCode}"));
        ToastClient.ShowSuccess("All Shortened Links were Copied to Clipboard!", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
        await JSRuntime.InvokeVoidAsync("copyToClipboard", textToCopy);
    }

    private async Task DeleteURL(int urlID)
    {
        APIResponse<string> response = await ShortenerService.DeleteURL(urlID);
        if (response.Success)
        {
            var urlindex = TableURLs.IndexOf(TableURLs.First(x => x.URL.ID == urlID));
            TableURLs.RemoveAt(urlindex);
            for (int i = urlindex + 1; i < TableURLs.Count; i++)
            {
                TableURLs[i].Index -= 1;
            }
            StateHasChanged();
            ToastClient.ShowSuccess("URL Deleted Successfully", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
        }
        else
            ToastClient.ShowError("Something went wrong while deleting the URL", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
    }

    private async Task ToggleActivation(int urlID, bool isActive)
    {
        APIResponse<string> response = await ShortenerService.ToggleActivation(urlID);

        if (response.Success)
        {
            var url = TableURLs.First(x => x.URL.ID == urlID);
            url.URL.IsActive = !isActive;

            string newState = isActive ? "InActivated" : "Activated";
            StateHasChanged();
            ToastClient.ShowInfo($"{newState}", settings =>
            {
                settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter;
                settings.Timeout = 2;
            });
        }
        else
        {
            ToastClient.ShowError($"There was an error processing your request:\n{response.ErrorMessage}");
        }
    }
}
