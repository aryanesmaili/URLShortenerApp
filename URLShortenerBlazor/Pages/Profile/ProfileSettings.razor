@inject IAuthenticationService AuthService
@inject IProfileSettingsService SettingsService
@inject Blazored.Toast.Services.IToastService ToastClient

<div class="mt-4">
    <div class="row">

        <div class="col-md-12">
            <!-- Error Section -->
            @if (errorMessages?.Count != 0 && errorMessages is not null)
            {
                <div class="alert alert-danger mt-1 mb-2 py-1">
                    <ul class="list-group list-group-flush">
                        @foreach (var error in errorMessages)
                        {
                            <li class="list-group-item list-group-item-danger mx-3 my-2">@error</li>
                        }
                    </ul>
                </div>
            }
        </div>

        <!-- Profile Update Section -->
        <div class="col-md-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Update Profile</h5>
                </div>
                <div class="card-body">
                    @if (userUpdate != null)
                    {
                        <EditForm Model="userUpdate" id="profileUpdateForm" OnValidSubmit="SendNewUserData">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <label for="name" class="form-label">Full Name</label>
                                <InputText @bind-Value="@userUpdate.Name" type="text" class="form-control" id="name" name="name" placeholder="New Full Name (Optional)" />
                            </div>
                            <div class="mb-3">
                                <label for="username" class="form-label">Username</label>
                                <InputText @bind-Value="@userUpdate.Username" type="text" class="form-control" id="username" name="username" placeholder="Enter Your New Username (Optional)" />
                            </div>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </EditForm>
                    }
                    else
                    {
                        <div class="window-loading"></div>
                    }
                </div>
            </div>
        </div>
        <!-- Email Change Section -->
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Change Email</h5>
                </div>
                <div class="card-body">
                    @if (ChangeEmailRequest != null)
                    {
                        <EditForm Model="ChangeEmailRequest" id="emailChangeForm" OnValidSubmit="SendChangeEmail">
                            <DataAnnotationsValidator />

                            <div class="mt-3">
                                <button class="btn btn-primary" type="button" @onclick="RequestEmailChange">Request a Email Change</button>
                            </div>

                            <div style="@(isCodeFieldVisible ? "display:inline;": "display:none;")">
                                <hr class="divider mb-3" />

                                <div class="mb-3">
                                    <label for="Code" class="form-label">Enter Code Sent to Your Email</label>
                                    <InputText @bind-Value="ChangeEmailRequest.Code" type="text" class="form-control" id="Code" name="Code" placeholder="Enter the code sent to your email" />
                                </div>
                                <button class="btn btn-primary" type="button" @onclick="SendResetCode">Submit Code</button>
                            </div>

                            <div style="@(isNewEmailFieldVisible ? "display:inline;" : "display:none;")">
                                <hr class="divider mb-3" />
                                <div class="mb-3">
                                    <label for="email" class="form-label">New Email</label>
                                    <InputText @bind-Value="ChangeEmailRequest.NewEmail" type="text" class="form-control" id="email" name="email" placeholder="Enter new email" />
                                    <small class="form-text text-danger">* Must be a valid email address and not in use.</small>
                                    <DataAnnotationsValidator />
                                </div>
                                <button type="submit" class="btn btn-info mt-3">Change Email</button>
                            </div>

                        </EditForm>
                    }
                    else
                    {
                        <div class="window-loading"></div>
                    }

                </div>
            </div>
        </div>

        <!-- Password Change Section -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Change Password</h5>
                </div>
                <div class="card-body">
                    @if (passwordRequest != null)
                    {
                        <EditForm Model="passwordRequest" id="passwordChangeForm">
                            <div class="mb-3">
                                <label for="newPassword" class="form-label">New Password</label>
                                <InputText @bind-Value="passwordRequest.NewPassword" type="password" class="form-control" id="newPassword" name="newPassword" placeholder="Enter new password" />
                                <small class="form-text text-danger">* 5-64 characters</small>
                                <ValidationMessage For="() => passwordRequest.NewPassword" />
                            </div>
                            <div class="mb-3">

                                <label for="confirmPassword" class="form-label">Confirm Password</label>
                                <InputText @bind-Value="passwordRequest.ConfirmPassword" type="password" class="form-control" id="confirmPassword" name="confirmPassword" placeholder="Confirm new password" />
                                <small class="form-text text-danger">* Must match new password</small>
                                <ValidationMessage For="() => passwordRequest.ConfirmPassword" />
                            </div>
                            <button type="submit" class="btn btn-warning">Change Password</button>
                        </EditForm>
                    }
                    else
                    {
                        <div class="window-loading"></div>
                    }
                </div>
            </div>
        </div>

    </div>
</div>

@code {
    UserUpdateDTO? userUpdate;
    ChangePasswordRequest? passwordRequest;
    ChangeEmailRequest? ChangeEmailRequest;
    private int userID;
    private List<string> errorMessages = new();
    private bool isCodeFieldVisible = false;
    private bool isNewEmailFieldVisible = false;

    protected override async Task OnInitializedAsync()
    {
        userID = await AuthService.GetUserIDAsync();
        userUpdate = new() { ID = userID };
        ChangeEmailRequest = new();
        passwordRequest = new()
            {
                NewPassword = string.Empty,
                ConfirmPassword = string.Empty,
                UserInfo = await AuthService.GetUserInfoAsync() ?? throw new Exception("User Data Empty")
            };
        StateHasChanged();
        await base.OnInitializedAsync();
    }

    private async Task SendNewUserData()
    {
        try
        {
            if (string.IsNullOrEmpty(userUpdate?.Username?.Trim()) && string.IsNullOrEmpty(userUpdate?.Name?.Trim()))
                return;

            APIResponse<UserDTO> response = await SettingsService.ChangeUserInfo(userUpdate!);

            if (!response.Success)
            {
                if (response.ErrorType == ErrorType.ValidationException)
                    errorMessages = response.Errors;
                else
                    errorMessages = new() { response.ErrorMessage };

                return;
            }
            await AuthService.UpdateUserInfo(response.Result!);
            ToastClient.ShowSuccess("User Data Updated Succesfully.", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
            StateHasChanged();
        }
        catch (Exception e)
        {
            errorMessages = new() { e.Message };
        }
    }

    private async Task RequestEmailChange()
    {
        try
        {
            APIResponse<string> res = await SettingsService.RequestChangingEmail(userID);
            if (!res.Success)
            {
                errorMessages = new() { res.ErrorMessage };
                return;
            }
            isCodeFieldVisible = true;
            StateHasChanged();
        }
        catch (Exception e)
        {
            errorMessages = new() { e.Message };
        }
    }

    private async Task SendResetCode()
    {
        try
        {
            if (string.IsNullOrEmpty(ChangeEmailRequest!.Code))
                return;
            APIResponse<string> res = await SettingsService.SendEmailChangeResetCode(userID, ChangeEmailRequest!);
            if (!res.Success)
            {
                errorMessages = new() { res.ErrorMessage };
                return;
            }
            isNewEmailFieldVisible = true;
            StateHasChanged();
        }
        catch (Exception e)
        {
            errorMessages = new() { e.Message };
        }
    }

    private async Task SendChangeEmail()
    {
        try
        {
            if (string.IsNullOrEmpty(ChangeEmailRequest!.NewEmail))
                return;

            APIResponse<UserDTO> response = await SettingsService.SendChangeEmailRequest(userID, ChangeEmailRequest);

            if (!response.Success)
            {
                if (response.ErrorType == ErrorType.ValidationException)
                    errorMessages = response.Errors;
                else
                    errorMessages = new() { response.ErrorMessage };

                return;
            }
            await AuthService.UpdateUserInfo(response.Result!);
            ToastClient.ShowSuccess("Email Updated Succesfully.", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
            StateHasChanged();
        }
        catch (Exception e)
        {
            errorMessages = new() { e.Message };
        }
    }
}
