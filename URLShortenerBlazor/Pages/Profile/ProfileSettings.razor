@inject IAuthenticationService AuthService
@inject IProfileSettingsService SettingsService
@inject Blazored.Toast.Services.IToastService ToastClient

<PageTitle>Settings</PageTitle>
<div class="mt-4">
    <div class="row">
        <!-- Error Section -->
        <div class="col-md-12">
            @if (errorMessages?.Count != 0 && errorMessages is not null)
            {
                <div class="alert alert-danger mt-1 mb-2 py-1">
                    <ul class="list-group list-group-flush">
                        @foreach (var error in errorMessages)
                        {
                            <li class="list-group-item list-group-item-danger mx-3 my-2">@error</li>
                        }
                    </ul>
                </div>
            }
        </div>

        <!-- Profile Update Section -->
        <div class="col-md-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Update Profile</h5>
                </div>
                <div class="card-body">
                    @if (userUpdateInfo != null)
                    {
                        <EditForm Model="userUpdateInfo" id="profileUpdateForm" OnValidSubmit="SendNewUserData">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <label for="name" class="form-label">Full Name</label>
                                <InputText @bind-Value="@userUpdateInfo.Name" type="text" class="form-control" id="name" name="name" placeholder="New Full Name (Optional)" />
                            </div>
                            <div class="mb-3">
                                <label for="username" class="form-label">Username</label>
                                <InputText @bind-Value="@userUpdateInfo.Username" type="text" class="form-control" id="username" name="username" placeholder="Enter Your New Username (Optional)" />
                            </div>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </EditForm>
                    }
                    else
                    {
                        <div class="window-loading"></div>
                    }
                </div>
            </div>
        </div>

        <!-- Email Change Section -->
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h5>Change Email</h5>
                </div>
                <div class="card-body">
                    @if (ChangeEmailRequestInfo != null)
                    {
                        <EditForm Model="ChangeEmailRequestInfo" id="emailChangeForm" OnValidSubmit="SendChangeEmail">
                            <DataAnnotationsValidator />

                            <div style="@(isEmailChangeRequestVisible ? "display:inline;": "display:none;")">
                                <div class="d-flex justify-content-center">
                                    <button class="btn btn-primary" type="button" @onclick="RequestEmailChange">Request a Email Change</button>
                                </div>
                            </div>

                            <div style="@(isEmailCodeFieldVisible ? "display:inline;": "display:none;")">
                                <div class="mb-3">
                                    <label for="Code" class="form-label">Enter Code Sent to Your Email</label>
                                    <InputText @bind-Value="EmailVerificationCode!.Code" type="text" class="form-control" id="Code" name="Code" placeholder="Code" />
                                </div>
                                <button class="btn btn-primary" type="button" @onclick="SendEmailVerificationCode">Submit Code</button>
                            </div>

                            <div style="@(isNewEmailFieldVisible ? "display:inline;" : "display:none;")">
                                <div class="mb-3">
                                    <label for="email" class="form-label">New Email</label>
                                    <InputText @bind-Value="ChangeEmailRequestInfo.NewEmail" type="text" class="form-control" id="email" name="email" placeholder="Enter new email" />
                                    <small class="form-text text-danger">* Must be a valid email address and not in use.</small>
                                    <DataAnnotationsValidator />
                                </div>
                                <button type="submit" class="btn btn-info mt-3">Change Email</button>
                            </div>

                        </EditForm>
                    }
                    else
                    {
                        <div class="window-loading"></div>
                    }

                </div>
            </div>
        </div>

        <!-- Password Change Section -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Change Password</h5>
                </div>
                <div class="card-body">
                    @if (changePasswordRequestInfo != null)
                    {
                        <EditForm Model="changePasswordRequestInfo" OnValidSubmit="SendPasswordChangeRequest" id="passwordChangeForm">
                            <DataAnnotationsValidator />

                            <div style="@(isPasswordChangeRequestVisible ? "display:inline;": "display:none;")">
                                <div class=" d-flex justify-content-center">
                                    <button class="btn btn-primary" type="button" @onclick="RequestPasswordChange">Request a Passsword Change</button>
                                </div>
                            </div>

                            <div style="@(isPasswordCodeFieldVisible ? "display:inline;": "display:none;")">

                                <div class="mb-3">
                                    <label for="Code" class="form-label">Enter Code Sent to Your Email</label>
                                    <InputText @bind-Value="PasswordVerificationCode!.Code" type="text" class="form-control" id="Code" name="Code" placeholder="Code" />
                                </div>
                                <button class="btn btn-primary" type="button" @onclick="SendPasswordVerificationCode">Submit Code</button>
                            </div>

                            <div style="@(isNewPasswordFieldVisible ? "display:inline;": "display:none;")">
                                <div class="mb-3">
                                    <label for="newPassword" class="form-label">New Password</label>
                                    <InputText @bind-Value="changePasswordRequestInfo.NewPassword" type="password" class="form-control" id="newPassword" name="newPassword" placeholder="new password" />
                                    <small class="form-text text-danger">* 5-64 characters</small>
                                    <ValidationMessage For="() => changePasswordRequestInfo.NewPassword" />
                                </div>
                                <div class="mb-3">
                                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                                    <InputText @bind-Value="changePasswordRequestInfo.ConfirmPassword" type="password" class="form-control" id="confirmPassword" name="confirmPassword" placeholder="Confirm new password" />
                                    <small class="form-text text-danger">* Must match new password</small>
                                    <ValidationMessage For="() => changePasswordRequestInfo.ConfirmPassword" />
                                </div>
                                <button type="submit" class="btn btn-warning">Change Password</button>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <div class="window-loading"></div>
                    }
                </div>
            </div>
        </div>

    </div>
</div>

@code {
    [Parameter]
    public UserDTO? UserInfo { get; set; }

    UserUpdateDTO? userUpdateInfo;
    ChangePasswordRequest? changePasswordRequestInfo;
    ChangeEmailRequest? ChangeEmailRequestInfo;
    CheckVerificationCode? PasswordVerificationCode;
    CheckVerificationCode? EmailVerificationCode;
    private int userID;

    private List<string> errorMessages = new();

    private bool isEmailChangeRequestVisible = true;
    private bool isEmailCodeFieldVisible = false;
    private bool isNewEmailFieldVisible = false;

    private bool isPasswordChangeRequestVisible = true;
    private bool isPasswordCodeFieldVisible = false;
    private bool isNewPasswordFieldVisible = false;

    protected override async Task OnInitializedAsync()
    {
        EmailVerificationCode = new();
        PasswordVerificationCode = new();
        userID = UserInfo!.ID;
        userUpdateInfo = new() { ID = userID };
        ChangeEmailRequestInfo = new();
        changePasswordRequestInfo = new()
            {
                NewPassword = string.Empty,
                ConfirmPassword = string.Empty,
                UserInfo = UserInfo!
            };
        StateHasChanged();
        await base.OnInitializedAsync();
    }

    private async Task SendNewUserData()
    {
        try
        {
            if (string.IsNullOrEmpty(userUpdateInfo?.Username?.Trim()) && string.IsNullOrEmpty(userUpdateInfo?.Name?.Trim()))
            {
                errorMessages.Clear();
                StateHasChanged();
                return;
            }

            APIResponse<UserDTO> response = await SettingsService.ChangeUserInfo(userUpdateInfo!);

            if (!response.Success)
            {
                if (response.ErrorType == ErrorType.ValidationException)
                    errorMessages = response.Errors;
                else
                    errorMessages = new() { response.ErrorMessage };

                return;
            }
            await AuthService.UpdateUserInfo(response.Result!);
            ToastClient.ShowSuccess("User Data Updated Succesfully.", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
            errorMessages.Clear();
            userUpdateInfo.Name = string.Empty;
            userUpdateInfo.Username = string.Empty;
        }
        catch (Exception e)
        {
            errorMessages = new() { e.Message };
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task RequestPasswordChange()
    {
        try
        {
            string identifier = UserInfo!.Email;
            APIResponse<string> response = await SettingsService.RequestChangePassword(identifier);
            if (!response.Success)
            {
                errorMessages = new() { response.ErrorMessage };
                return;
            }
            ManagePasswordVisibility(RequestButtonVisible: !response.Success, CodeFieldVisible: response.Success); // set the visibility of Ui Elements.
            errorMessages.Clear();
        }
        catch (Exception e)
        {
            errorMessages = new() { e.Message };
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task SendPasswordVerificationCode()
    {
        try
        {
            if (string.IsNullOrEmpty(PasswordVerificationCode!.Code))
                return;
            PasswordVerificationCode.Identifier = UserInfo!.Username;
            APIResponse<UserDTO> response = await SettingsService.SendPasswordVerificationCode(PasswordVerificationCode);
            if (!response.Success)
            {
                errorMessages = new() { response.ErrorMessage };
                return;
            }
            ManagePasswordVisibility(CodeFieldVisible: !response.Success, NewPasswordVisible: response.Success); // set the visibility of Ui Elements.
            errorMessages.Clear();
            PasswordVerificationCode.Identifier = string.Empty;
            PasswordVerificationCode.Code = string.Empty;
        }
        catch (Exception e)
        {
            errorMessages = new() { e.Message };
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task SendPasswordChangeRequest()
    {
        try
        {
            if (string.IsNullOrEmpty(changePasswordRequestInfo!.NewPassword) || string.IsNullOrEmpty(changePasswordRequestInfo.ConfirmPassword))
                return;
            changePasswordRequestInfo.UserInfo = UserInfo!;
            APIResponse<UserDTO> response = await SettingsService.SendChangePassowrdRequest(changePasswordRequestInfo);
            if (!response.Success)
            {
                errorMessages = new() { response.ErrorMessage };
                return;
            }
            ToastClient.ShowSuccess("Password Updated Succesfully.", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
            ManagePasswordVisibility(RequestButtonVisible: response.Success, NewPasswordVisible: !response.Success); // set the visibility of Ui Elements.
            errorMessages.Clear();
            changePasswordRequestInfo.NewPassword = string.Empty;
            changePasswordRequestInfo.ConfirmPassword = string.Empty;
        }
        catch (Exception e)
        {
            errorMessages = new() { e.Message };
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task RequestEmailChange()
    {
        try
        {
            APIResponse<string> res = await SettingsService.RequestChangingEmail(userID);
            if (!res.Success)
            {
                errorMessages = new() { res.ErrorMessage };
                return;
            }
            ManageEmailVisibility(RequestButtonVisible: !res.Success, CodeFieldVisible: res.Success); // set the visibility of Ui Elements.
            errorMessages.Clear();
        }
        catch (Exception e)
        {
            errorMessages = new() { e.Message };
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task SendEmailVerificationCode()
    {
        try
        {
            if (string.IsNullOrEmpty(EmailVerificationCode!.Code))
                return;
            APIResponse<string> res = await SettingsService.SendEmailVerificationCode(userID, EmailVerificationCode!);
            if (!res.Success)
            {
                errorMessages = new() { res.ErrorMessage };
                return;
            }
            ManageEmailVisibility(CodeFieldVisible: !res.Success, NewEmailVisible: res.Success);
            errorMessages.Clear();
        }
        catch (Exception e)
        {
            errorMessages = new() { e.Message };
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task SendChangeEmail()
    {
        try
        {
            if (string.IsNullOrEmpty(ChangeEmailRequestInfo!.NewEmail))
                return;

            APIResponse<UserDTO> response = await SettingsService.SendChangeEmailRequest(userID, ChangeEmailRequestInfo);

            if (!response.Success)
            {
                if (response.ErrorType == ErrorType.ValidationException)
                    errorMessages = response.Errors;
                else
                    errorMessages = new() { response.ErrorMessage };

                return;
            }
            await AuthService.UpdateUserInfo(response.Result!);
            ToastClient.ShowSuccess("Email Updated Succesfully.", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
            ManageEmailVisibility(RequestButtonVisible: response.Success, NewEmailVisible: !response.Success);
            errorMessages.Clear();
            ChangeEmailRequestInfo.NewEmail = string.Empty;
        }
        catch (Exception e)
        {
            errorMessages = new() { e.Message };
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void ManagePasswordVisibility(bool RequestButtonVisible = false, bool CodeFieldVisible = false, bool NewPasswordVisible = false)
    {
        isPasswordChangeRequestVisible = RequestButtonVisible;
        isPasswordCodeFieldVisible = CodeFieldVisible;
        isNewPasswordFieldVisible = NewPasswordVisible;
    }

    private void ManageEmailVisibility(bool RequestButtonVisible = false, bool CodeFieldVisible = false, bool NewEmailVisible = false)
    {
        isEmailChangeRequestVisible = RequestButtonVisible;
        isEmailCodeFieldVisible = CodeFieldVisible;
        isNewEmailFieldVisible = NewEmailVisible;
    }
}
