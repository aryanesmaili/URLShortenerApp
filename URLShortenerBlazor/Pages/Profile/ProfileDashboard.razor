 @inject IProfileDashboardService DashboardService
 @inject IAuthenticationService AuthService

<div class="py-4">
    <div class="container-fluid">
        <div class="row">
            <!-- Click Trends -->
            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        Click Trends
                    </div>
                    <div class="card-body">
                        @if (_config != null)
                        {
                            <Chart Config="_config"></Chart>
                        }
                    </div>
                </div>
            </div>

            <!-- Time of Day Analysis -->
            <div class="col-md-6 mb-4">
                <div class="card">
                    <div class="card-header">
                        Time of Day Analysis
                    </div>
                    <div class="card-body">
                        @if (_barConfig != null)
                        {
                            <Chart Config="_barConfig"></Chart>
                        }
                    </div>
                </div>
            </div>

            <!-- Top Lists Section -->
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        Top Clicked Locations
                    </div>
                    <div class="card-body p-0 bg-light">
                        <ol class="top-list">
                            @foreach (var item in TopCountries)
                            {
                                <li>@item</li>
                            }
                        </ol>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        Top Devices Used
                    </div>
                    <div class="card-body p-0 bg-light">
                        <ol class="top-list">
                            @foreach (var item in TopDevices)
                            {
                                <li>@item</li>
                            }
                        </ol>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        Top Clicked URLs
                    </div>
                    <div class="card-body p-0 bg-light">
                        <ol class="top-list">
                            @foreach (var item in TopClickedURLs)
                            {
                                <li><a href="https://@item.LongURL"></a></li>
                            }
                        </ol>
                    </div>
                </div>
            </div>
            <!-- Recent Activity -->
            <div class="col-12 mb-4">
                <div class="card recent-activity">
                    <div class="card-header">
                        Recent Activity
                    </div>
                    <div class="card-body p-3">
                        <table class="table  table-hover">
                            <thead>
                                <tr>
                                    <th>Long URL</th>
                                    <th>Short Code</th>
                                    <th>Date Created</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td class="url-cell">https://example.com/some-long-url</td>
                                    <td>exmpl123</td>
                                    <td>2024-10-26</td>
                                    <td>
                                        <button class="action-btn" title="Edit">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="action-btn" title="Delete">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                        <button class="action-btn" title="Open">
                                            <i class="fas fa-external-link-alt"></i>
                                        </button>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private Dictionary<string, int> MonthlyChartData = new();
    private Dictionary<string, int> HourlyChartData = new();
    private List<string> TopDevices = new();
    private List<string> TopCountries = new();
    private List<URLDTO> RecentURLs = new();
    private List<URLDTO> TopClickedURLs = new();

    private string errorMessage = string.Empty;

    private LineConfig? _config;
    private BarConfig? _barConfig;

    protected override async Task OnInitializedAsync()
    {
        int uid = await AuthService.GetUserIDAsync();
        await GetDashboardData(uid);

        await base.OnInitializedAsync();
    }

    private async Task GetDashboardData(int userID)
    {
        APIResponse<UserDashboardDTO> response = await DashboardService.GetDashboardInfo(userID);
        try
        {
            if (!response.Success)
            {
                errorMessage = response.ErrorMessage;
                return;
            }
            MonthlyChartData = response.Result!.MonthlyChartData ?? new();
            HourlyChartData = response.Result!.HourlyChartData ?? new();
            TopClickedURLs = response.Result!.TopClickedURLs ?? new();
            TopCountries = response.Result!.TopCountries ?? new();
            TopDevices = response.Result!.TopOSs ?? new();
            RecentURLs = response.Result!.MostRecentURLs ?? new();
            PrepareCharts();
        }
        catch (Exception)
        {
            errorMessage = response.ErrorMessage;
        }
    }

    private void PrepareCharts()
    {
        _config = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Monthly Clicks"
                    },
                    Legend = new()
                    {
                        Display = false
                    },
                }
            };
        _barConfig = new BarConfig
            {
                Options = new BarOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Daily Clicks"
                    },
                    Legend = new()
                    {
                        Display = false
                    },

                }
            };
        foreach (string day in MonthlyChartData.Keys)
        {
            _config.Data.Labels.Add(day);
        }
        foreach (var hour in HourlyChartData.Keys)
        {
            _barConfig.Data.Labels.Add(hour);
        }
        LineDataset<int> linedataset = new LineDataset<int>(MonthlyChartData.Values) { BackgroundColor = ColorUtil.ColorHexString(75, 192, 192), };
        BarDataset<int> BarDataset = new(HourlyChartData.Values) { BackgroundColor = ColorUtil.ColorHexString(75, 192, 192) };
        _config.Data.Datasets.Add(linedataset);
        _barConfig.Data.Datasets.Add(BarDataset);
    }
}
