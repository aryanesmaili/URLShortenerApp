@page "/URLShortener"
@inject IAuthenticationService AuthService
@inject IShortenerService ShortenerService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject Blazored.Toast.Services.IToastService ToastClient

<body class="pt-5 bg-light">
    <div class="container py-5">
        <header class="text-center mb-5">
            <h1 class="display-4 text-purple">URL Shortener</h1>
            <p class="lead">Simplify your links with ease!</p>
        </header>

        <div class="card shadow-sm">
            <div class="card-header bg-purple text-white py-3">
                <div class="d-flex justify-content-between align-items-center">
                    <h2 class="h5 mb-0">Shorten Your URLs</h2>
                    <div class="d-flex justify-content-center align-items-center">
                        <label class="me-2">Single Mode</label>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" @bind="IsBatchMode">
                        </div>
                        <label class="ms-2">Batch Mode</label>
                    </div>
                </div>
            </div>
            <div class="card-body">
                @if (errorMessage?.Count != 0 && errorMessage is not null)
                {
                    <div class="alert alert-danger mt-1 mb-2 py-1">
                        <ul class="list-group list-group-flush">
                            @foreach (var error in errorMessage)
                            {
                                <li class="list-group-item list-group-item-danger mx-3 my-2">@error</li>
                            }
                        </ul>
                    </div>
                }
                @if (!isBatchMode)
                {
                    <div id="singleMode">
                        <EditForm Model="@urlCreate" OnValidSubmit="HandleSingleSubmit">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <label for="longUrl" class="form-label">Long URL <span style="color:red;">*</span></label>
                                <InputText @bind-Value="urlCreate.LongURL" type="text" class="form-control" id="longUrl"
                                           placeholder="https://www.example.com" required />
                                <ValidationMessage For="() => urlCreate.LongURL" />
                            </div>
                            <div class="mb-3">
                                <label for="categories" class="form-label">URL Categories (Comma Separated)</label>
                                <InputText @bind-Value="urlCreate.Categories" type="text" class="form-control" id="categories"
                                           placeholder="LordOfTheRings, Western-Cinema, Telegram_Channel" />
                                <ValidationMessage For="() => urlCreate.Categories" />
                            </div>
                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputTextArea @bind-Value="urlCreate.Description" class="form-control" id="description" rows="3"
                                               placeholder="These URLs are related to the Lord Of The Rings Trilogy." />
                                <ValidationMessage For="() => urlCreate.Description" />
                            </div>
                            <div class="mb-3 d-flex gap-3">
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="urlCreate.IsActive" class="form-check-input" id="active" />
                                    <label class="form-check-label" for="active">Active</label>
                                </div>
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="urlCreate.IsMonetized" class="form-check-input" id="monetize" />
                                    <label class="form-check-label" for="monetize">Monetize</label>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-purple">Shorten!</button>
                        </EditForm>
                    </div>
                }
                else
                {
                    <div id="batchMode">
                        <EditForm Model="urlCreate" OnValidSubmit="HandleBatchSubmit">
                            <div class="mb-3">
                                <label for="batchURLs" class="form-label">
                                    List of URLs <span style="color:red;">*</span>
                                </label>
                                <InputTextArea @bind-Value="URLs" class="form-control batch-url-area" id="batchURLs"
                                               rows="5" required />
                            </div>
                            <div class="mb-3">
                                <label for="batchCategories" class="form-label">URL Categories (Comma Separated)</label>
                                <InputText @bind-Value="urlCreate.Categories" type="text" class="form-control" id="batchCategories"
                                           placeholder="LordOfTheRings, Western-Cinema, Telegram_Channel" />
                            </div>
                            <div class="mb-3">
                                <label for="batchDescription" class="form-label">Description</label>
                                <InputTextArea @bind-Value="urlCreate.Description" class="form-control" id="batchDescription"
                                               rows="3" placeholder="These URLs are related to the Lord Of The Rings Trilogy." />
                            </div>
                            <div class="mb-3 d-flex gap-3">
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="urlCreate.IsActive" class="form-check-input" id="active" />
                                    <label class="form-check-label" for="active">Active</label>
                                </div>
                                <div class="form-check">
                                    <InputCheckbox @bind-Value="urlCreate.IsMonetized" class="form-check-input" id="monetize" />
                                    <label class="form-check-label" for="monetize">Monetize</label>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-purple">Shorten Batch!</button>
                        </EditForm>
                    </div>
                }
            </div>
        </div>
        @if (!(TableURLs.Count == 0))
        {
            <div class="mt-5">
                <h2 class="h4 mb-3">Preview of Shortened URLs</h2>
                <table class="table-responsive table table-hover">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Description</th>
                            <th>Short Code</th>
                            <th>Long URL</th>
                            <th>Category</th>
                            <th>Status</th>
                            @if (TableURLs.Count > 1)
                            {
                                <th>
                                    <button class="btn btn-icon" title="Copy ALl Shortened URLs at Once!" @onclick="() => CopyAllToClipboard()">
                                        <Icon Name="IconName.Copy" IconSize="IconSize.Large" Style="color:White;"></Icon>
                                    </button>
                                </th>
                            }
                            else
                            {
                                <th></th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in TableURLs)
                        {
                            <tr>
                                <td>@item.Index</td>
                                <td>@item.URL.Description</td>
                                <td><a href="https://Pexita.click/@item.URL.ShortCode" class="text-decoration-none">@item.URL.ShortCode</a></td>
                                <td>@item.URL.LongURL</td>
                                <td class="px-2 py-3">
                                    @if (item.URL.Categories?.Count > 0)
                                        @foreach (var category in item.URL.Categories)
                                        {
                                            <span class="@GetCategorySpanClass(category.Title)">@category.Title</span>
                                        }
                                </td>
                                <td>
                                    <!-- Activation Toggle Button -->
                                    <button type="button" class="status-toggle" @onclick="() => ToggleActivation(item.URL.ID, item.URL.IsActive)">
                                        <span class="status-badge @(item.URL.IsActive ? "active" : "inactive")">
                                            @(item.URL.IsActive ? "Active" : "Inactive")
                                        </span>
                                    </button>

                                    <!-- Monetization Toggle Button -->
                                    <button type="button" class="status-toggle ms-2" @onclick="() => ToggleMonetization(item.URL.ID, item.URL.IsMonetized)">
                                        <span class="status-badge @(item.URL.IsMonetized ? "active" : "inactive")">
                                            @(item.URL.IsMonetized ? "Monetized" : "Not Monetized")
                                        </span>
                                    </button>
                                </td>
                                <td>
                                    <button class="btn btn-icon" title="Copy URL" @onclick="() => CopyToClipboard(item.URL.ShortCode!)">
                                        <Icon Name="IconName.Copy"></Icon>
                                    </button>
                                    <button class="btn btn-icon" style="color:orangered;" title="Delete URL" @onclick="() => DeleteURL(item.URL.ID)">
                                        <Icon Name="IconName.Delete"></Icon>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                @if (TableURLs.Count > 0)
                {
                    <p class="text-dark">
                        <small>
                            ** If a row is shown in <span style="color:gray">Gray Color</span> it means it has been shortened before by you.
                        </small>
                    </p>
                }
            </div>

        }
    </div>
</body>
<script>
    window.copyToClipboard = function (text) {
        navigator.clipboard.writeText(text)
            .catch(function (err) {
                console.error('Could not copy text: ', err);
            });
    }
</script>
@code {
    public string? url { get; set; }

    URLCreateDTO urlCreate = new()
        {
            LongURL = string.Empty,
            UserID = 0,
        };

    private int index = 1;
    private int userID;
    private string URLs = string.Empty;
    private bool isBatchMode = false;

    private List<TRow> TableURLs = new();
    private List<string> errorMessage = new();
    private readonly List<string> badges = new()
    {
        "badge bg-primary",
        "badge bg-secondary",
        "badge bg-success",
        "badge bg-danger",
        "badge bg-info",
    };

    private bool IsBatchMode
    {
        get => isBatchMode;
        set
        {
            if (isBatchMode != value)
            {
                isBatchMode = value;
                ClearFields(); // clear the fields on switch.
            }
        }
    }


    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        url = query["url"];
        userID = await AuthService.GetUserIDAsync();
        urlCreate.LongURL = string.IsNullOrEmpty(url) ? string.Empty : url;
        urlCreate.UserID = userID;
        await base.OnInitializedAsync();
    }

    private void ClearFields()
    {
        urlCreate = new()
            {
                LongURL = string.Empty,
                UserID = userID,
                Categories = string.Empty,
                Description = string.Empty,
                IsActive = true,
                IsMonetized = true,
            };
        URLs = string.Empty;  // Clear the batch URLs
    }

    private async Task HandleSingleSubmit()
    {
        try
        {
            errorMessage.Clear();
            APIResponse<URLShortenResponse> response = await ShortenerService.ShortenSingle(urlCreate);

            if (response.Success)
            {
                if (!TableURLs.Any(x => x.URL.LongURL == response.Result!.URL.LongURL))
                {
                    TableURLs.Add(new TRow() { URL = response.Result!.URL, IsNew = response.Result.IsNew, Index = index });
                    index++;
                    StateHasChanged();
                }
                else
                {
                    ToastClient.ShowInfo("URL was already shortened", options => options.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
                }
                ClearFields();
                return;
            }

            else
            {
                if (response.ErrorType == ErrorType.ValidationException)
                {
                    errorMessage = response.Errors;
                }

                else if (response.ErrorType == ErrorType.NotAuthorizedException)
                {
                    ToastClient.ShowError("You are Not Logged in! Redirecting...", options => options.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
                    await Task.Delay(2000);
                    Navigation.NavigateTo("/Login");
                }

                else
                {
                    errorMessage = new List<string>() { response.ErrorMessage };
                }
            }
        }

        catch (Exception e)
        {
            errorMessage = new List<string>() { e.Message };
            string x = string.Empty;
        }
    }

    private async Task HandleBatchSubmit()
    {
        errorMessage.Clear();
        List<string> LongURLs = URLs.Split(new[] { '\n', ',', ';' },
            StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
            .ToList();

        List<URLCreateDTO> createDTOs = new();
        try
        {
            foreach (string item in LongURLs)
            {
                URLCreateDTO createDTO = new()
                    {
                        LongURL = item,
                        UserID = userID,
                        Description = urlCreate.Description,
                        IsActive = urlCreate.IsActive,
                        Categories = urlCreate.Categories
                    };
                createDTOs.Add(createDTO);
            }

            APIResponse<List<URLShortenResponse>> response = await ShortenerService.ShortenBatch(createDTOs);

            if (response.Success)
            {

                // Create dictionary from original order
                Dictionary<string, int> inputOrder = LongURLs
                    .Select((url, index) => new { url, index })
                    .ToDictionary(x => x.url, x => x.index);

                List<URLShortenResponse> sortedList = response.Result!
                    .OrderBy(batchURL => inputOrder[batchURL.URL.LongURL!])
                    .ToList();

                inputOrder.Clear(); // since we already have them in table
                HashSet<TRow> uniqueItems = new HashSet<TRow>(TableURLs);
                foreach (var item in sortedList)
                {
                    uniqueItems.Add(new TRow { URL = item.URL, Index = index, IsNew = item.IsNew });
                    index++;
                }
                TableURLs = uniqueItems.OrderBy(x => x.Index).ToList();
                StateHasChanged();
                ClearFields();
            }
            else
            {
                if (response.ErrorType == ErrorType.ValidationException)
                {
                    errorMessage = response.Errors;
                }
                else if (response.ErrorType == ErrorType.NotAuthorizedException)
                {
                    Navigation.NavigateTo("/Login");
                }
                else
                {
                    errorMessage = new List<string>() { response.ErrorMessage };
                }
            }
        }
        catch (Exception e)
        {
            errorMessage = new List<string>() { e.Message };
        }
    }

    private string GetRowClass(TRow row)
    {
        return row.IsNew ? "" : "table-secondary";
    }

    private string GetCategorySpanClass(string category)
    {
        int index = Math.Abs(category.GetHashCode()) % badges.Count;
        return badges[index];
    }

    private async Task CopyToClipboard(string textToCopy)
    {
        if (!string.IsNullOrEmpty(textToCopy))
        {
            textToCopy = "https://Pexita.click/" + textToCopy;
            ToastClient.ShowSuccess("Text Copied to Clipboard!", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
            await JSRuntime.InvokeVoidAsync("copyToClipboard", textToCopy);
        }
    }

    private async Task CopyAllToClipboard()
    {
        string textToCopy = string.Join('\n', TableURLs.Select(x => $"https://Pexita.click/{x.URL.ShortCode}"));
        ToastClient.ShowSuccess("All Shortened Links were Copied to Clipboard!", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
        await JSRuntime.InvokeVoidAsync("copyToClipboard", textToCopy);
    }

    private async Task DeleteURL(int urlID)
    {
        APIResponse<string> response = await ShortenerService.DeleteURL(urlID);
        if (response.Success)
        {
            var urlindex = TableURLs.IndexOf(TableURLs.First(x => x.URL.ID == urlID));
            TableURLs.RemoveAt(urlindex);
            for (int i = urlindex + 1; i < TableURLs.Count; i++)
            {
                TableURLs[i].Index -= 1;
            }
            StateHasChanged();
            ToastClient.ShowSuccess("URL Deleted Successfully", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
        }
        else
            ToastClient.ShowError("Something went wrong while deleting the URL", settings => settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter);
    }

    private string GetActivationSpanClass(bool isActive)
    {
        return isActive ? "badge bg-success" : "badge bg-secondary";
    }

    private async Task ToggleActivation(int urlID, bool isActive)
    {
        APIResponse<string> response = await ShortenerService.ToggleActivation(urlID);

        if (response.Success)
        {
            // Update the URL status in the TableURLs collection
            var url = TableURLs.First(x => x.URL.ID == urlID);
            url.URL.IsActive = !isActive;  // Toggle the status

            string newState = isActive ? "InActivated" : "Activated";
            StateHasChanged();
            ToastClient.ShowInfo($"{newState}", settings =>
            {
                settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter;
                settings.Timeout = 2;
            });
        }
        else
        {
            ToastClient.ShowError($"There was an error processing your request:\n{response.ErrorMessage}");
        }
    }

    private async Task ToggleMonetization(int urlID, bool isMonetized)
    {
        APIResponse<string> response = await ShortenerService.ToggleMonetization(urlID);

        if (response.Success)
        {
            var url = TableURLs.First(x => x.URL.ID == urlID);
            url.URL.IsMonetized = !isMonetized;

            string newState = isMonetized ? "No Longer Monetized" : "Is Now Monetized";
            StateHasChanged();
            ToastClient.ShowInfo($"{newState}", settings =>
            {
                settings.Position = Blazored.Toast.Configuration.ToastPosition.BottomCenter;
                settings.Timeout = 2;
            });
        }
        else
        {
            ToastClient.ShowError($"There was an error processing your request:\n{response.ErrorMessage}");
        }
    }
}