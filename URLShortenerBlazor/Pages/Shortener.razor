@page "/URLShortener/{url?}"
@inject IAuthenticationService AuthService
@inject IShortenerService ShortenerService
@inject NavigationManager Navigation

<body class="bg-light pt-5">
    <div class="container py-5">
        <header class="text-center mb-5">
            <h1 class="display-4 text-purple">URL Shortener</h1>
            <p class="lead">Simplify your links with ease!</p>
        </header>

        <div class="card shadow-sm">
            <div class="card-header bg-purple text-white py-3">
                <div class="d-flex justify-content-between align-items-center">
                    <h2 class="h5 mb-0">Shorten Your URLs</h2>
                    <div class="d-flex justify-content-center align-items-center">
                        <label class="me-2">Single Mode</label>
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" @bind="IsBatchMode">
                        </div>
                        <label class="ms-2">Batch Mode</label>
                    </div>
                </div>
            </div>
            <div class="card-body">
                @if (!isBatchMode)
                {
                    <div id="singleMode">
                        <EditForm Model="@urlCreate" OnValidSubmit="HandleSingleSubmit">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <label for="longUrl" class="form-label">Long URL <span style="color:red;">*</span></label>
                                <InputText @bind-Value="urlCreate.LongURL" type="url" class="form-control" id="longUrl"
                                           placeholder="https://www.example.com" required />
                                <ValidationMessage For="() => urlCreate.LongURL" />
                            </div>
                            <div class="mb-3">
                                <label for="categories" class="form-label">URL Categories (Comma Separated)</label>
                                <InputText @bind-Value="urlCreate.Categories" type="text" class="form-control" id="categories"
                                           placeholder="LordOfTheRings, Western-Cinema, Telegram_Channel" />
                                <ValidationMessage For="() => urlCreate.Categories" />
                            </div>
                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputTextArea @bind-Value="urlCreate.Description" class="form-control" id="description" rows="3"
                                               placeholder="These URLs are related to the Lord Of The Rings Trilogy." />
                                <ValidationMessage For="() => urlCreate.Description" />
                            </div>
                            <div class="mb-3 form-check">
                                <InputCheckbox @bind-Value="urlCreate.IsActive" class="form-check-input" id="active"/>
                                <label class="form-check-label" for="active">Active</label>
                            </div>
                            <button type="submit" class="btn btn-purple">Shorten!</button>
                        </EditForm>
                    </div>
                }
                else
                {
                    <div id="batchMode">
                        <EditForm Model="urlCreate" OnValidSubmit="HandleBatchSubmit">
                            <div class="mb-3">
                                <label for="batchURLs" class="form-label">
                                    List of URLs (one per line) <span style="color:red;">*</span>
                                </label>
                                <InputTextArea @bind-Value="URLs" class="form-control batch-url-area" id="batchURLs"
                                               rows="5" required />
                            </div>
                            <div class="mb-3">
                                <label for="batchCategories" class="form-label">URL Categories (Comma Separated)</label>
                                <InputText @bind-Value="urlCreate.Categories" type="text" class="form-control" id="batchCategories"
                                           placeholder="LordOfTheRings, Western-Cinema, Telegram_Channel" />
                            </div>
                            <div class="mb-3">
                                <label for="batchDescription" class="form-label">Description</label>
                                <InputTextArea @bind-Value="urlCreate.Description" class="form-control" id="batchDescription"
                                               rows="3" placeholder="These URLs are related to the Lord Of The Rings Trilogy." />
                            </div>
                            <div class="mb-3 form-check">
                                <InputCheckbox @bind-Value="urlCreate.IsActive" class="form-check-input" id="batchActive" />
                                <label class="form-check-label" for="batchActive">Active</label>
                            </div>
                            <button type="submit" class="btn btn-purple">Shorten Batch!</button>
                        </EditForm>
                    </div>
                }
            </div>
        </div>
        <div class="mt-5">
            <h2 class="h4 mb-3">Preview of Shortened URLs</h2>
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-purple">
                        <tr>
                            <th>ID</th>
                            <th>Description</th>
                            <th>Short Code</th>
                            <th>Long URL</th>
                            <th>Category</th>
                            <th>Status</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in TableURLs)
                        {
                            <tr>
                                <td>@item.Index</td>
                                <td>@item.URL.Description</td>
                                <td><a href="https://Pexita.click/@item.URL.ShortCode" class="text-decoration-none">@item.URL.ShortCode</a></td>
                                <td class="text-truncate">@item.URL.LongURL</td>
                                <td>
                                    @if (item.URL.Categories?.Count > 0)
                                        @foreach (var category in item.URL.Categories)
                                        {
                                            <span class="badge bg-purple">@category.Title</span>

                                        }
                                </td>
                                <td>
                                    @if (item.URL.IsActive)
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">InActive</span>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-icon" title="Copy URL">
                                        <Icon Name="IconName.Copy"></Icon>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <p class="text-muted">
                <small>
                    ** The ShortCodes specified are estimates, may be different after the real
                    shortening!
                </small>
            </p>
        </div>
    </div>
</body>

@code {
    [Parameter]
    public string? url { get; set; }

    URLCreateDTO urlCreate = new()
        {
            LongURL = string.Empty,
            UserID = 0,
        };

    private List<TRow> TableURLs = new();
    private int index = 1;
    private int userID;
    private string URLs = string.Empty;
    private bool isBatchMode = false;

    private bool IsBatchMode
    {
        get => isBatchMode;
        set
        {
            if (isBatchMode != value)
            {
                isBatchMode = value;
                ClearFields(); // clear the fields on switch.
            }
        }
    }
    private class TRow
    {
        public int Index { get; set; }
        public required URLDTO URL { get; set; }
        public bool isNew { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        userID = await AuthService.GetUserID();
        urlCreate.LongURL = string.IsNullOrEmpty(url) ? string.Empty : url;
        urlCreate.UserID = userID;
        await base.OnInitializedAsync();
    }

    private void ClearFields()
    {
        urlCreate = new()
            {
                LongURL = string.Empty,
                UserID = userID,
                Categories = string.Empty,
                Description = string.Empty,
                IsActive = true
            };
        URLs = string.Empty;  // Clear the batch URLs
    }

    private async Task HandleSingleSubmit()
    {
        try
        {
            URLDTO response = await ShortenerService.ShortenSingle(urlCreate);
            TableURLs.Add(new TRow() { URL = response, isNew = true, Index = index });
            index++;
            StateHasChanged();
            ClearFields();
        }

        // catch (NotAuthorizedException e)
        // {
        //     Display some kind of error here.

        //     Navigation.NavigateTo("/Login", true);
        // }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task HandleBatchSubmit()
    {
        string[] LongURLs = URLs.Split('\n');
        List<URLCreateDTO> createDTOs = new();
        try
        {
            foreach (var item in LongURLs)
            {
                URLCreateDTO createDTO = new()
                    {
                        LongURL = item,
                        UserID = userID,
                        Description = urlCreate.Description,
                        IsActive = urlCreate.IsActive,
                        Categories = urlCreate.Categories
                    };
                createDTOs.Add(createDTO);
            }
            List<BatchURLAdditionResponse> response = await ShortenerService.ShortenBatch(createDTOs);

        }
        // catch (NotAuthorizedException e)
        // {
        //     Display some kind of error here.

        //     Navigation.NavigateTo("/Login", true);
        // }
        catch (Exception)
        {

            throw;
        }
    }
}
