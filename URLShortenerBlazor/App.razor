@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@inject NavigationManager Navigation
@inject CustomAuthProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <Authorizing>
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                </Authorizing>
                <NotAuthorized>
                    @if (!isAuthenticated)
                    {
                        @* JavaScript to navigate to home *@
                        <script>
                            setTimeout(() => {
                                window.location.href = "/Login";
                            }, 0);
                        </script>
                    }
                    else
                    {
                        <p role="alert">You are not authorized to view this page.</p>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <URLShortenerBlazor.Pages.NotFoundPage/>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    private bool isAuthenticated;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
    }
}
